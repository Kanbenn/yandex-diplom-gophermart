// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go

package mocks

import (
	reflect "reflect"

	models "github.com/Kanbenn/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// Mockstorer is a mock of storer interface.
type Mockstorer struct {
	ctrl     *gomock.Controller
	recorder *MockstorerMockRecorder
}

// MockstorerMockRecorder is the mock recorder for Mockstorer.
type MockstorerMockRecorder struct {
	mock *Mockstorer
}

// NewMockstorer creates a new mock instance.
func NewMockstorer(ctrl *gomock.Controller) *Mockstorer {
	mock := &Mockstorer{ctrl: ctrl}
	mock.recorder = &MockstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorer) EXPECT() *MockstorerMockRecorder {
	return m.recorder
}

// InsertNewUser mocks base method.
func (m *Mockstorer) InsertNewUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockstorerMockRecorder) InsertNewUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*Mockstorer)(nil).InsertNewUser), user)
}

// InsertOrder mocks base method.
func (m *Mockstorer) InsertOrder(o models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockstorerMockRecorder) InsertOrder(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*Mockstorer)(nil).InsertOrder), o)
}

// InsertOrderWithdrawal mocks base method.
func (m *Mockstorer) InsertOrderWithdrawal(o models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrderWithdrawal", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrderWithdrawal indicates an expected call of InsertOrderWithdrawal.
func (mr *MockstorerMockRecorder) InsertOrderWithdrawal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderWithdrawal", reflect.TypeOf((*Mockstorer)(nil).InsertOrderWithdrawal), o)
}

// SelectUserAuth mocks base method.
func (m *Mockstorer) SelectUserAuth(login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAuth", login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAuth indicates an expected call of SelectUserAuth.
func (mr *MockstorerMockRecorder) SelectUserAuth(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAuth", reflect.TypeOf((*Mockstorer)(nil).SelectUserAuth), login)
}

// SelectUserBalance mocks base method.
func (m *Mockstorer) SelectUserBalance(uid int) (models.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserBalance", uid)
	ret0, _ := ret[0].(models.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserBalance indicates an expected call of SelectUserBalance.
func (mr *MockstorerMockRecorder) SelectUserBalance(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserBalance", reflect.TypeOf((*Mockstorer)(nil).SelectUserBalance), uid)
}

// SelectUserOrders mocks base method.
func (m *Mockstorer) SelectUserOrders(uid int) ([]models.UserOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserOrders", uid)
	ret0, _ := ret[0].([]models.UserOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserOrders indicates an expected call of SelectUserOrders.
func (mr *MockstorerMockRecorder) SelectUserOrders(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserOrders", reflect.TypeOf((*Mockstorer)(nil).SelectUserOrders), uid)
}

// SelectUserWithdrawHistory mocks base method.
func (m *Mockstorer) SelectUserWithdrawHistory(uid int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserWithdrawHistory", uid)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserWithdrawHistory indicates an expected call of SelectUserWithdrawHistory.
func (mr *MockstorerMockRecorder) SelectUserWithdrawHistory(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserWithdrawHistory", reflect.TypeOf((*Mockstorer)(nil).SelectUserWithdrawHistory), uid)
}
